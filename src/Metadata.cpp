#include "tekari/Metadata.h"

#include <sstream>

TEKARI_NAMESPACE_BEGIN

using namespace std;

Metadata::Metadata()
:   m_IsPectralData(false)
,   m_InPhi(0.0f)
,   m_InTheta(0.0f)
,   m_SampleName("Untilted")
,   m_PointsInFile(-1)
{}

void Metadata::addLine(const string& line)
{
    m_RawMetaData.push_back(line);
}

void Metadata::initInfos()
{
    const string* line;

    m_IsPectralData = findLineStartingWith("#spectral data generated by") != nullptr;;

    if ((line = findLineStartingWith("#inphi")) != nullptr) {
        sscanf(line->c_str() + 6, "%f", &m_InPhi);
    } else if ((line = findLineStartingWith("#phi_in")) != nullptr) {
        sscanf(line->c_str() + 7, "%f", &m_InPhi);
    }
    
    if ((line = findLineStartingWith("#intheta")) != nullptr) {
        sscanf(line->c_str() + 8, "%f", &m_InTheta);
    } else if ((line = findLineStartingWith("#theta_in")) != nullptr) {
        sscanf(line->c_str() + 9, "%f", &m_InTheta);
    }

    if ((line = findLineStartingWith("#datapoints_in_file")) != nullptr) {
        sscanf(line->c_str() + 20, "%d", &m_PointsInFile);
    }
    
    if ((line = findLineStartingWith("#sample_name")) != nullptr) {
        m_SampleName = stripQuoteMarks(line->substr(13));
    }
}

string Metadata::toString() const
{
    ostringstream result;
    for (const auto& line : m_RawMetaData)
        result << line << '\n';
    return result.str();
}

const string* Metadata::findLineContaining(const string &target) const
{
    for (const auto& line : m_RawMetaData)
        if (line.find(target) != string::npos)
            return &line;
    return nullptr;
}

const string* Metadata::findLineStartingWith(const string &target) const
{
    for (const auto& line : m_RawMetaData)
        if (line.find(target) == 0)
            return &line;
    return nullptr;
}

TEKARI_NAMESPACE_END